#######################################################################
Created: 2010-05-12
Authors: Aaron Sweeney, Chris Olson

Last Revised: 2014-05-09
#######################################################################
DESCRIPTION:

Generating R2R Navigation Standard Products

This code is designed to produce three navigation standard products
from the primary GPS receiver onboard research vessels in the UNOLS
fleet.

 Products:

	1.  NavBestRes: GPS position sampled at the highest rate
		         in time (typ. once-per-second) with "bad"
                         positions flagged.
        2.  Nav1Min:    NavBestRes sampled at once-per-minute
        3.  NavControl: Nav1Min sampled using the Douglas Peucker 
                         algorithm to specify the minimum number of
                         points to capture the general shape of a 
                         curve
########################################################################
CODE MANIFEST:

Text:

	README.install: This file.

Functions and parameters:

	getmeta.php: Functions for getting cruise-level metadata including 
        	     max. vessel speed and input/output paths.
	getopts.php: Function to process command-line arguments.
	r2rdb-config.inc.php: Parameter definitions required for querying R2R 
                               database.
	paths.inc.php: Test basepath settings (see below).
	flags.inc.php: Defines the character used for flagging during quality control.
	jsontools.inc.php: Function to pretty-print JSON given a PHP object.
	navtools.inc.php: Functions for calculating distance, speed, acceleration, 
                           azimuth, and geographic extent.
	nmeatools.inc.php: Classes for various NMEA messages.
	decompressor.inc.php: Test for the presence of compressed files and uncompress
                               them in your temporary work space.
	navdatalist.inc.php: Create a date/time ordered list of raw 
                              navigation files.
	navcopy.inc.php: Read through all files in the datalist and translate
                          them into R2R navigation standard format.
        navqa.inc.php: Assess the quality of the navigation in standard format.
	navbounds.inc.php: Calculate the geographic extent of the cruise (north, south,
                       west, east).
        navqc.inc.php: Flag "bad" navigation data.  Output: NavBestRes
	navsogcog.inc.php: Calculate instantaneous speed over ground and course over ground
                            and append columns to NavBestRes file.
        navsample.inc.php: Sample the navigation data at a lower rate than
                            originally sampled.  No interpolation or filtering is
                            performed.  Output: Nav1Min
	xmltools.inc.php: Function to write QA Report in XML format.
	nav_qa_template_ver1.0.xml: Quality Assessment XML template for use with navigation
                           based on R2R XML schema version 1.0.

Executable scripts:

	navformat.php: Display supported input navigation formats.
	navcopy.php: Convert raw navigation data into the r2r standard format
	navinfo.php: Get basic info on r2rnav files
	navqa.php:	Performa a quality assesment report on r2rnav files
	navqc.php:	Flag bad values in r2rnav files
	navsample:	Downsample r2rnav files
	navsogcog:	Compute speed over ground and course over ground
		for r2rnav files

Java code:

        NavControl (directory): Grab the minimum number of points to
                                 capture the general shape of the 
                                 navigation track.  Output: NavControl        

Documentation:
        doc/fileformat/format-nav[N].txt: 
          Plain text files describing known fileformats (and content)
        doc/guide/processing_guide.txt: 
          Plain text file describing what to look out for when processing nav.
        doc/bestpractices/Recommended-Best-Practices-for-Navigation-Data-Collection.pdf
          PDF file describing recommendations to operators on best practices
          for navigation data collection

#########################################################################
INSTALLATION:

Requirements:

You will need a version of PHP that is at least 5.2 in order to use the 
built-in JSON functions: json_encode() and json_decode().

You will need a version of Java that is at least 1.5 in order to use
the NavControl Java code.

Optional PostgreSQL support: 

If you want to query the R2R database for cruise-level metadata, your 
version of PHP must have support for PostgreSQL.  Specifically, the PHP 
commands that are required to access the R2R database are pg_connect(), 
pg_query(), pg_num_rows(), and pg_fetch_row().  You will not need 
PostgreSQL support if you pull your cruise-level metadata from a 
configuration file (see navmanager.php usage).  On fleet.rvdata.us, 
the version of PHP that has PostgreSQL and JSON support is located at 
/ldeo/mgg/opt/bin/php.

Notes:

The '#!/usr/bin/env php' at the top of each executable script will 
resolve to whichever version of PHP is first in your path.

##########################################################################
DEFINING YOUR ENVIRONMENT:


You should add the absolute path name of where you placed these programs 
to your path environment variable.  For bash users, add the following line
to your ~/.bashrc file:

For Mac users running bash:

   cat 'PATH=$PATH:/path/to/r2r/portable_nav/bin' >> ~/.bash_profile

For linux users running bash:

   cat 'PATH=$PATH:/path/to/r2r/portable_nav/bin' >> ~/.bashrc

For linux users running csh:

	cat 'setenv PATH $PATH:/path/to/r2r/portable_nav/bin' >> ~/.cshrc

Make sure to change the path in these commands to where your r2r_nav
code actually resides.

Now you can type the name of the executable scripts on the command line 
and see a general description of what the code does and what arguments to
specify.


##########################################################################
RUNNING THE CODE:

The first step in running NavManager is to convert raw navigation
files into the standard r2rnav format.  Do this with navcopy.php

navcopy.php -i /path/to/rawdata/dir -o /path/to/data.r2rnav -f nav1

To see if your data is in a supported format, and to get info on
the supported navigation formats, checkout out navformat.php

navformat.php -f all

Once you have converted your raw data into a .r2rnav file, you
can use this file with any of the other NavManager functions
